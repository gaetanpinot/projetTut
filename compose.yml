networks:
  amap.net:
    driver: bridge

services:

  front-web:
    build:
      context: ./build
      dockerfile: nginx.Dockerfile
    volumes:
      - ./Front/dist/amap/browser/:/www/web
    ports:
      - $PORT_FRONT:80
    restart: unless-stopped

  front-build:
    image: node:latest
    volumes:
      - ./Front:/app
    working_dir: /app
    command: sh -c "npm install && npm run build --omit=dev"

  php:
    image: canals/php:8.3
    # build:
    #   context: ./dockerfile
    #   dockerfile: php8.3.Dockerfile
    container_name: amap_php
    ports:
      - $PORT_PHP:80
    networks:
      - amap.net
    env_file: ./secret.env
    volumes:
      - ./api:/var/www/html
    working_dir: /var/www/html
    depends_on:
      amap.db:
        condition: service_healthy

  adminer:
    image: adminer:latest
    container_name: amap_adminer
    ports:
      - $PORT_ADMINER:8080
    networks:
      - amap.net
    command: php -S 0.0.0.0:8080 -t /var/www/html
    depends_on:
      amap.db:
        condition: service_healthy

  amap.db:
    image: postgres:alpine
    container_name: amap_pgsql
    volumes:
      - ./sql:/var/sql
    env_file: ./db.env
    networks:
      - amap.net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 2s
      retries: 5
      timeout: 10s
    restart: always
